import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";

import Header from "../../components/Header";

const API_KEY = process.env.NEXT_PUBLIC_ALCHEMY_API_KEY;

const Info = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [nft, setNft] = useState(null);
  const [copied, setCopied] = useState(false);

  const router = useRouter();
  const { contract, token } = router.query;

  useEffect(() => {
    if (contract && token) {
      fetchNft();
    }
  }, [contract, token]);

  const loadingIcon = (color = "text-white") => (
    <svg
      className={`animate-spin -mt-1 h-6 w-6 ${color} inline-block`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );

  const fetchNft = async () => {
    setIsLoading(true);

    try {
      const baseURL = `https://eth-mainnet.alchemyapi.io/v2/${API_KEY}/getNFTMetadata/`;
      let requestOptions = {
        method: "GET",
      };

      let fetchURL;
      fetchURL = `${baseURL}?contractAddress=${contract}&tokenId=${token}`;

      nft = await fetch(fetchURL, requestOptions).then((data) => data.json());

      console.log(nft);
      setNft(nft);
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const getThumbnail = (item) => {
    if (item.media.length > 0 && item.media[0].thumbnail) {
      return item.media[0].thumbnail;
    } else if (item.media.length > 0 && item.media[0].raw.includes("svg+xml")) {
      let source = item.media[0].raw;

      if (source.includes("svg+xml;utf8,")) {
        let raw = source.split("utf8,")[1];
        source = `data:image/svg+xml;base64,${btoa(raw)}`;
      }

      return source;
    } else if (item.metadata.image) {
      let image = item.metadata.image;

      if (image.includes("ipfs://")) {
        image = image.replace("ipfs://", "https://ipfs.infura.io/ipfs/");
      }

      return image;
    } else {
      return "/images/NFT.png";
    }
  };

  const getTitle = (item) => {
    let tokenId = Number(item.id.tokenId);

    if (item.title && !item.title.includes("#")) {
      return `${item.title} #${tokenId}`;
    } else if (item.title) {
      return item.title;
    } else if (!item.title) {
      return `#${tokenId}`;
    } else {
      // unlikely
      return "Untitled NFT";
    }
  };

  const copy = (address) => {
    navigator.clipboard.writeText(address);
    setCopied(true);

    setTimeout(() => {
      setCopied(false);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-slate-900">
      <Head>
        <title>Road to Web3 - Week 4</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="px-6 py-12 md:p-20">
        <Header />

        <div className="p-4 md:p-6 lg:p-8 xl:p-12 bg-slate-100 rounded-xl mt-8">
          <div className="flex md:mt-4 flex-wrap md:flex-nowrap">
            {!nft && <div className="text-center py-12 w-full">{loadingIcon("text-slate-600")}</div>}
            {nft && (
              <>
                <div className="block rounded-md bg-white w-full md:w-1/3 lg:w-1/3 2xl:w-1/4 self-start">
                  <img
                    src={getThumbnail(nft)}
                    className="w-full group-hover:scale-125 transition duration-400 rounded-md"
                  />
                </div>
                <div className="mt-8 md:mt-0 md:ml-12 flex-1">
                  <h4 className="text-4xl text-slate-700 font-bold group-hover:text-slate-900">{getTitle(nft)}</h4>
                  <ul className="mt-10 text-xl text-slate-500">
                    <li className="flex mt-2 flex-wrap">
                      <span className="block w-full lg:w-60">Contract Address</span>
                      <span className="block flex-1 text-slate-700 break-word break-all">
                        <a
                          href={`https://etherscan.io/address/${nft.contract.address}`}
                          target="_blank"
                          rel="noreferrer"
                          className="hover:text-slate-900"
                        >
                          {nft.contract.address}
                        </a>
                        {!copied && (
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="inline-block ml-4 -top-1 relative cursor-pointer text-slate-500"
                            height="24"
                            viewBox="0 0 24 24"
                            width="24"
                            onClick={() => copy(nft.contract.address)}
                          >
                            <path d="M0 0h24v24H0V0z" fill="none"></path>
                            <path
                              fill="currentColor"
                              d="M15 1H4c-1.1 0-2 .9-2 2v13c0 .55.45 1 1 1s1-.45 1-1V4c0-.55.45-1 1-1h10c.55 0 1-.45 1-1s-.45-1-1-1zm4 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-1 16H9c-.55 0-1-.45-1-1V8c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1z"
                            ></path>
                          </svg>
                        )}

                        {copied && (
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg"
                            className="inline-block ml-4 -top-1 relative cursor-pointer text-slate-500"
                          >
                            <path fill="none" d="M0 0h24v24H0V0Z" />
                            <path
                              fill="currentColor"
                              d="M9 16.17L5.53 12.7c-.39-.39-1.02-.39-1.41 0 -.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41 -.39-.39-1.02-.39-1.41 0L9 16.17Z"
                            />
                          </svg>
                        )}
                      </span>
                    </li>
                    <li className="flex mt-2">
                      <span className="block w-full lg:w-60">Token ID</span>
                      <span className="block flex-1 text-slate-700">#{Number(nft.id.tokenId)}</span>
                    </li>
                  </ul>
                  {nft.metadata.attributes.length > 0 && (
                    <>
                      <h4 className="mt-12 text-slate-700 text-2xl">Attributes</h4>
                      <ul className="flex gap-4 md:gap-6 mt-4 flex-wrap">
                        {nft.metadata.attributes.map((item, index) => (
                          <li
                            key={index}
                            className="px-4 py-2 md:px-6 md:py-4 bg-white rounded-xl ring-2 ring-slate-200"
                          >
                            <span className="uppercase block text-slate-400 text-sm">{item.trait_type}</span>
                            <span className="text-slate-700 text-xl">{item.value}</span>
                          </li>
                        ))}
                      </ul>
                    </>
                  )}
                </div>
              </>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Info;
