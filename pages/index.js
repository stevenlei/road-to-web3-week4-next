import Head from "next/head";
import { useState, useEffect } from "react";

const API_KEY = process.env.NEXT_PUBLIC_ALCHEMY_API_KEY;

export default function Home() {
  const [walletAddress, setWalletAddress] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const [collection, setCollection] = useState("");
  const [wallet, setWallet] = useState(
    "0xf57d762b6eCe30242c4A2a1c022ed155eD5FbA83"
  );
  const [nfts, setNfts] = useState([]);

  useEffect(() => {
    checkIfWalletIsConnected();
    walletChangeListener();

    fetchNfts();
  }, []);

  const checkIfWalletIsConnected = async () => {
    try {
      if (window.ethereum) {
        const { ethereum } = window;

        const accounts = await ethereum.request({
          method: "eth_accounts",
        });

        if (accounts.length > 0) {
          setWalletAddress(accounts[0]);
          ensureOnNetwork();
        }
      }
    } catch (err) {
      console.error("Please install metamask");
    }
  };

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        const { ethereum } = window;

        const accounts = await ethereum.request({
          method: "eth_requestAccounts",
        });

        if (accounts.length > 0) {
          setWalletAddress(accounts[0]);
          ensureOnNetwork();
        } else {
          alert("No address found");
        }
      }
    } catch (err) {
      console.error(err);
    }
  };

  const walletChangeListener = async () => {
    try {
      const { ethereum } = window;

      if (ethereum) {
        ethereum.on("accountsChanged", async (accounts) => {
          if (accounts.length === 0) {
            // Disconnected
            setWalletAddress(null);
          } else {
            setWalletAddress(accounts[0]);
            ensureOnNetwork();
          }
        });
      }
    } catch (err) {}
  };

  const ensureOnNetwork = async () => {
    try {
      const { ethereum } = window;

      const provider = new ethers.providers.Web3Provider(ethereum);
      const { chainId } = await provider.getNetwork();
      console.log(`chainId: ${chainId}`);

      if (chainId !== 80001) {
        await ethereum.request({
          method: "wallet_addEthereumChain",
          params: [
            {
              chainId: "0x13881",
              chainName: "Mumbai",
              rpcUrls: ["https://rpc-mumbai.matic.today"],
              nativeCurrency: {
                name: "Matic",
                symbol: "Matic",
                decimals: 18,
              },
              blockExplorerUrls: ["https://explorer-mumbai.maticvigil.com"],
            },
          ],
        });
      }
    } catch (err) {
      console.error(err);
    }
  };

  const loadingIcon = () => (
    <svg
      className="animate-spin -mt-1 h-6 w-6 text-white inline-block"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );

  const fetchNfts = async () => {
    const baseURL = `https://eth-mainnet.alchemyapi.io/v2/${API_KEY}/getNFTs/`;
    var requestOptions = {
      method: "GET",
    };

    if (!collection.length) {
      const fetchURL = `${baseURL}?owner=${wallet}`;

      nfts = await fetch(fetchURL, requestOptions).then((data) => data.json());
    } else {
      console.log("fetching nfts for collection owned by address");
      const fetchURL = `${baseURL}?owner=${wallet}&contractAddresses%5B%5D=${collection}`;
      nfts = await fetch(fetchURL, requestOptions).then((data) => data.json());
    }

    if (nfts) {
      console.log("nfts:", nfts);
      setNfts(nfts.ownedNfts);
    }
  };

  return (
    <div className="min-h-screen bg-slate-900">
      <Head>
        <title>Road to Web3 - Week 4</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="px-6 py-12 md:p-20">
        <h1 className="text-5xl font-bold text-white">Road to Web3 - Week 4</h1>
        <p className="mt-4 text-lg text-slate-500">
          This is a practice project to learn solidity and ethers.js. Third week
          is to develop a &quot;Battle Chains (NFT metadata on-chain)&quot;
          smart contract.
          <br />
          <a
            href="https://docs.alchemy.com/alchemy/road-to-web3/weekly-learning-challenges/3.-how-to-make-nfts-with-on-chain-metadata-hardhat-and-javascript"
            target="_blank"
            rel="noreferrer"
            className="inline-block bg-slate-800 rounded-md text-slate-300 mt-4 p-1 px-2 hover:bg-slate-700"
          >
            ➡️ Amazing tutorial here
          </a>
        </p>

        <div className="p-12 bg-white rounded-md mt-8 flex gap-y-8 flex-wrap">
          {nfts.map((item) => (
            <div key={item.tokenUri.raw} className="w-1/6 p-2">
              <a href="#" className="group">
                <div className="block transition overflow-hidden rounded-md">
                  <img
                    src={item.media[0].thumbnail}
                    className="w-full group-hover:scale-110 transition duration-400"
                  />
                </div>
                <h5 className="mt-2 text-md text-slate-500 group-hover:text-slate-600">
                  {item.contract.address}
                </h5>
                <h4 className="text-lg text-slate-700 font-bold group-hover:text-slate-900">
                  {item.title}
                </h4>
              </a>
            </div>
          ))}
        </div>

        {/* <div className="text-center mt-12">
          {!walletAddress && (
            <button
              className="mt-12 py-3 px-8 bg-purple-800 shadow-lg hover:bg-purple-900 rounded-full text-white text-2xl"
              onClick={connectWallet}
            >
              Connect Wallet
            </button>
          )}
        </div> */}
      </main>
    </div>
  );
}
